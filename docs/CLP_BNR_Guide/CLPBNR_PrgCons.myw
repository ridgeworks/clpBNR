###  Logic Programming With Constraints

#### Using Constraints to Restore Logical Behaviour to Arithmetic

The conventional standard arithmetic which has been added to Prolog uses the primitives `is` and the various relational arithmetic operators of the forms:
eg
	Var is Expression
	Expression Op Expression
where `Expression` denotes a valid and fully instantiated arithmetic expression. Therefore any logic variables in expression must be instantiated before these goals are evaluated; otherwise failure or exceptions are raised. Since most applications need to do some arthmetic, this is one of the main reasons why they do not enjoy the same properties of the small teaching examples.

Constraints, supported in CLP sytems (like CLP(FD), CLP(Z), CLP(R), and CLP(BNR)), avoid early failure (or errors) by delaying arithmetic evaluation until the conditions are sufficient to do so. When this occurs, the logic variables in the "question" will be bound to specific numeric values in the "answer". But in some cases, this may never happen, so the answer just indicates the set of possible values the variable might have. In the continuous domain of reals supported by CLP(BNR) this is just the closed interval defined by an upper and lower bound. And where floating point values are mandated, a variable can never be bound to a precise value due to the inaccuracy in the underlying floating point representations and operations. While cumbersome this is necessary for reasons of correctness. (One would hope that a single floating point value would at least be in an acceptable range of possible answers, but for most computer arithmetic implementations even that isn't a certainty.)

It is tempting to recommend that all arithmetic in Prolog programs should be done with constraints and restore the logical properties to those applications that use it, but that incurs a cost that may be unacceptable in many cases. For those applications where logical behaviour, or code simplicity is more important, this section illustrates how constraints may be used in Prolog applications.

#### Example 1, List Length

To get an idea of the what must be done to restore logical behaviour of predicates built with "illogical" arithmetic, here's the `listing` of the SWI Prolog system predicate `length/2`:
eg
	?- listing(length).
	system:length(List, Length) :-
		var(Length),
		!,
		'$skip_list'(Length0, List, Tail),
		(   Tail==[]
		->  Length=Length0
		;   var(Tail)
		->  Tail\==Length,
			'$length3'(Tail, Length, Length0)
		;   throw(error(type_error(list, List), context(length/2, _)))
		).
	system:length(List, Length) :-
		integer(Length),
		Length>=0,
		!,
		'$skip_list'(Length0, List, Tail),
		(   Tail==[]
		->  Length=Length0
		;   var(Tail)
		->  Extra is Length-Length0,
			'$length'(Tail, Extra)
		;   throw(error(type_error(list, List), context(length/2, _)))
		).
	system:length(_, Length) :-
		integer(Length),
		!,
		throw(error(domain_error(not_less_than_zero, Length),
					context(length/2, _))).
	system:length(_, Length) :-
		throw(error(type_error(integer, Length), context(length/2, _))).

	true.
To be fair, part of the complexity is due to performance optimization (use of foreign language primitives to avoid recursion in Prolog) and part is due to the tendency of standard Prolog to generate errors under "exceptional" conditions, rather than treat them as a "failure of logic". But the key observation is that it has to be separated into two main cases: `Length` as a variable or `Length` as an integer. The various ways it can be used:
eg
	?- length( [1,2,3,4], N).
	N = 4.

	﻿?- length( X, 4).
	X = [_, _, _, _].

	?- length( [X|Xs], 4). 
	Xs = [_, _, _].

	?- length( [_,_], 4). 
	false.

	?- length( [X|Xs], -3). 
	ERROR: Domain error: `not_less_than_zero' expected, found `-3'
	ERROR: In:
	ERROR:    [9] throw(error(domain_error(not_less_than_zero,-3),context(...,_5604)))
	ERROR:    [7] <user>
	ERROR: 
	ERROR: Note: some frames are missing due to last-call optimization.
	ERROR: Re-run your program in debug mode (:- debug.) to get more detail.
	﻿?- length( [X|Xs], N).
	Xs =  ([]),
	N = 1 ;
	Xs = [_],
	N = 2 ;
	Xs = [_, _],
	N = 3 ;
	Xs = [_, _, _],
	N = 4 ;
	Xs = [_, _, _, _],
	N = 5 .
Here's a CLP(BNR) constraint based version (but an equivalent version could be just as easily constructed using CLP(FD) or a similar finite domain constraint system):
.pl
	list_length([],0).         % length of empty list is 0.
	list_length([X|Xs],N):-    % length of non-empy list [X|Xs] is N if ...
		[N,N1]::integer(0,_),  %   list lengths are non-negative and finite integers, and
		{N1 is N - 1},         %   N1 is one less than N, and 
		list_length(Xs,N1).    %   length of Xs is N1
Testing with the same set of queries:
eg
	?- list_length([1,2,3,4],N). 
	N = 4.

	?- list_length(X,4). 
	X = [_, _, _, _] ;
	false.

	?- list_length([X|Xs],4). 
	Xs = [_, _, _] ;
	false.

	?- list_length([_,_],4). 
	false.

	?- list_length([X|Xs],-3). 
	false.

	﻿?- list_length([X|Xs],N).
	Xs =  ([]),
	N = 1 ;
	Xs = [_],
	N = 2 ;
	Xs = [_, _],
	N = 3 ;
	Xs = [_, _, _],
	N = 4 ;
	Xs = [_, _, _, _],
	N = 5 .
So what we've ended up with is a simple implementation that's semantically equivalent to the system predicate (modulo error handling) but is orders of magnitude worse in performance. Why did we bother? So we can do things like taming the infinite backtracker :
eg
	﻿?- N::integer(5,7), list_length(L,N).
	N = 5,
	L = [_, _, _, _, _] ;
	N = 6,
	L = [_, _, _, _, _, _] ;
	N = 7,
	L = [_, _, _, _, _, _, _] ;
	false.
The point of this exercise was not to invent a better version of `length/2`. The built-in version is very efficient and generally works the way you want. But if code complexity and readability are issues, which is usually the case for Prolog users, constraints restore the ability to write programs that are dependent on arithmetic in a very "logical" way.

<#TableOfContents>

#### Example 2, Summing a List

Consider a predicate to sum a list of numeric quantities. Using standard arithmetic, the simple and obvious solution is:
.pl
	sum([],0).
	sum([X|Xs], Sum):- sum(Xs,S), Sum is X+S.
Note that we have to calculate `S` before performing the addition because the right hand side expression must be grounded. This version also has the drawback that it is not tail-recursive, consuming more stack storage, so it's not a great solution for long lists. A tail-recursive version introduces an auxiliary predicate and an accumulator variable:
.pl
	sum(List,Sum) :- sum1(List,0,Sum).
	sum1([],Sum,Sum).
	sum1([X|Xs],S,Sum) :- S1 is S+X, sum1(Xs,S1,Sum).
A constraint based version which is tail-recursive without needing the auxiliary predicate can be written because the order of the goals in the second clause can be reversed:
.pl
	sum([],S) :- {S==0}.
	sum([X|Xs],Sum) :- {Sum == X+S}, sum(Xs,S).
This version also permits S to be a numeric expression, e.g., `sum(L,2+Y)`, but if that is not a concern `sum/2` can be more simply expressed as:
.pl
	sum([],0).
	sum([X|Xs],Sum) :- {Sum == X+S}, sum(Xs,S).
So this does what the simple standard version does in a space efficient manner and it can sum mixed lists since CLP(BNR) supports integers and rationals as a subset of reals,:
eg
	?- sum([1,2,3],S).
	S = 6.

	?- sum([1,2/3,3],S).
	S = 14r3.

	?- sum([1.1,2.2,3],S).
	S = ﻿S:: 6.30000000000000... .

	?- sum([1.1,22/10,3],S).
	S = ﻿S:: 6.30000000000000... .
Note the "fuzzing" due to the presence of floating point constants.

Since the logical properties of `sum/2` have been restored, it can be used in many different ways. In the most general case it generates all lists of all sums (manually terminated after three cases):
eg
	﻿?- sum(L,S).
	L =  ([]),
	S = 0 ;
	L = [_A],
	S::real(-1.0Inf, 1.0Inf),
	_A::real(-1.0Inf, 1.0Inf) ;
	L = [_A, _B],
	S::real(-1.0Inf, 1.0Inf),
	_A::real(-1.0Inf, 1.0Inf),
	_B::real(-1.0Inf, 1.0Inf) ;
	L = [_A, _B, _C],
	S::real(-1.0Inf, 1.0Inf),
	_A::real(-1.0Inf, 1.0Inf),
	_B::real(-1.0Inf, 1.0Inf),
	_C::real(-1.0Inf, 1.0Inf) .
As with other predicates of this nature, e.g., `list_length/2`, the potential for non-termination exists and must be managed.
eg
	﻿?- length(L,3), L::integer(0,10), sum(L,S).
	L = [_A, _B, _C],
	_A::integer(0, 10),
	_B::integer(0, 10),
	_C::integer(0, 10),
	S::real(0, 30).
Because CLP(BNR) only constrains numbers, order is important, i.e., the list length must be defined before `sum/2` is executed. The order can be changed provided the potential non-determinism is managed, e.g., by using cut (`!`):
eg
	﻿?- sum(L,S), length(L,3), L::integer(0,10).
	L = [_A, _B, _C],
	S::real(0, 30),
	_A::integer(0, 10),
	_B::integer(0, 10),
	_C::integer(0, 10) .
Other possible queries:
eg
	?- sum(L,10), L=[1,V,3], !.
	L = [1, 6, 3],
	V = 6.

	?- S::integer(0,10), sum(L,S), L=[1,V,3], !.
	﻿L = [1, V, 3],
	S::integer(0, 10),
	V::real(-4, 6).
Another useful technique is to avoid doing arithmetic at all; just symbolically create the sum result and then constrain it. Or not, because it works equally well with standard Prolog arithmetic or another arithmetic CLP system. A symbolic version of `sum/2`:
.pl
	sym_sum([],0).
	sym_sum([X|Xs], X+S) :-  sym_sum(Xs,S).
And some examples:
eg
	?- sym_sum([1,2,3],S), Sum is S.
	S = 1+(2+(3+0)),
	Sum = 6.
	
	?- sym_sum([1,2,3],S),{Sum == S}.
	S = 1+(2+(3+0)),
	Sum = 6.
	
	?- Sum::integer(0,10), sym_sum([1,V,3],S), {Sum == S}.
	﻿﻿S = 1+(V+(3+0)),
	Sum::integer(0, 10),
	V::real(-4, 6).
	
	﻿?- sym_sum([1,V-3,3],S), {Sum == S}, Sum::integer(0,10).
	S = 1+(V-3+(3+0)),
	Sum::integer(0, 10),
	V::real(-1, 9).
A possible downside, from a pure logic programming perspective, is that the expression (`S` in the examples) must be instantiated before the constraint. Otherwise, `sym_sum` will try to unify an interval with the expression which fails. (Intervals can only be unified with numeric values and other intervals.)

This pattern of working symbolically and only afterwards converting to constraints enables the same predicate to be used with different arithmetic systems, e.g., CLP(FD). It can be helpful during development because the expressions may be more readable before the logic variables are constrained.

Counting booleans{#id cardinality} is an important use of integer constraints and since `boolean` variables are implemented as numeric intervals (`integer(0,1)`), `sym_sum/2` can be used to define a cardinality predicate which constrains the members of a list of boolean variables:
eg
	cardinality(Blist, L, H) :- sym_sum(Blist, Sum), C::integer(L,H), {C is Sum}.
For a list of booleans, `Bs`, of length `N`:
eg
	cardinality(Bs, 1, 1)		% true if exactly one B is true (1)
	cardinality(Bs, M, M)		% true if exactly M B's are true
	cardinality(Bs, M, N)		% true if at least M B's are true
	cardinality(Bs, 0, M)		% true if at most M B's are true
	cardinality(Bs, N, N)		% true if all B's are true
Possible uses of this predicate are described elsewhere in this document.

<#TableOfContents>

#### Example 3, N Factorial

Nothing new; just another example:
.pl
	n_factorial(0, 1).                % !0 is 1.
	n_factorial(N, F) :-              % !N is N*!(N-1)
		[N,F,F1]::integer(1,inf),     %    all values are positive integers, and
		{N1 == N-1, F == N*F1},       %    N1 is N-1, F is N*F1, and
		n_factorial(N1, F1).          %    F1 is !N1.
and examples of usage:
eg
	?- n_factorial(10,F).
	F = 3628800 ;
	false.
	
	?- n_factorial(N,3628800).
	N = 10 ;
	false.
	
	?- n_factorial(N,F).
	N = 0,
	F = 1 ;
	N = F, F = 1 ;
	N = F, F = 2 ;
	N = 3,
	F = 6 ;
	N = 4,
	F = 24 ;
	N = 5,
	F = 120 ;
	N = 6,
	F = 720 ;
	N = 7,
	F = 5040 .
	
	?- n_factorial(N,42).
	false.
Note that this implementation is non-deterministic (no "green" cut in the first clause) to enable generation of solutions (last example).

Hopefully these simple examples demonstrate that constraints and logic programming are complementary. Not only are they conceptually compatible, but constraints provide the sort of arithmetic capability that Prolog has arguably always needed, while Prolog provides the symbolic processing and programming environment needed to make effective use of constraints.

<#TableOfContents>

#### Constraints and Prolog Negation

The negation-by-failure construct of Prolog (`\+` or `not`) works with constraints according to the normal rules:
eg
	\+ {C}
succeeds only if the constraint C fails, i.e., `C` is provably inconsistent with the constraints already in the system. For example, if, having already declared variables `X` and `Y` and established constraints involving them, we ask:
eg
	... \+ {X>=Y}
and it succeeds, it indicates that `X` cannot possibly be larger or equal to `Y`. Furthermore, there is a proof of this fact, which was discovered by carrying out the proof. Note also that negations of constraint goals are persistent, e.g., if `X` can not be larger (or equal) to `Y`, no additional constraints are going to change that.

Recall that `{X<Y}` are incomplete over real intervals (as is `>` and `<>`) and one might be tempted to use `not({X>=Y})` as a substitute. This is complete but has the property that nothing is narrowed when applying this constraint due to the nature of Prolog negation-by-failure. Thus it is a legitimate test, i.e., there are no solutions for which `X<Y`, but it may not help all that much in finding actual values for `X` and `Y`.

The double negation:
eg
	not(not({C}))
indicates that the constraint `C` is possibly consistent, but does not actually impose the constraint. Success here does not actually guarantee consistency, because the underlying mechanism is incomplete, as discussed previously.

<#TableOfContents>

&