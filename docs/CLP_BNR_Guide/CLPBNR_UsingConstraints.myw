###  Constraint Based Logic Programming

It's not always apparent when constraints can be used effectively to solve a problem. This section uses a number of examples which can be used as patterns to evaluate the use of constraints as an effective solution. The techniques described in the section should be applicable to any CLP implementation depending on the domains supported.

#### Modelling with Numerical Constraints

One of the more challenging aspects of programming with CLP's is constructing a numerical model from a problem statement which isn't obviously expressed as such. Consider the following classic Lewis Carrol logic puzzle:

>	Five men with different nationalities live in the first five houses of a street.  They practise five distinct professions, and each of them has a favourite animal and a favourite drink, all of them different.  The five houses are painted in different colours.
	 
	* The Englishman lives in a red house.
	* The Spaniard owns a dog.
	* The Japanese is a painter.
	* The Italian drinks tea.
	* The Norwegian lives in the first house on the left.
	* The owner of the green house drinks coffee.
	* The green house is on the right of the white one.
	* The sculptor breeds snails.
	* The diplomat lives in the yellow house.
	* Milk is drunk in the middle house.
	* The Norwegian's house is next to the blue one.
	* The violinist drinks fruit juice.
	* The fox is in a house next to that of the doctor.
	* The horse is in a house next to that of the diplomat.
	
	Who owns a zebra, and who drinks water?

In constructing a model, recognize that there are 5 house numbers, `integer(1,5)`, ordered left to right and 5 characteristics (nationalities, house colour, etc.). Each characteristic will be modelled by a list of 5 variables which are the house number corresponding to that characteristic value while ensuring that values in each list are distinct. So for nationalities:
.pl
		Nat = [English, Spaniard, Japanese, Italian, Norwegian],
		Nat::integer(1..5),
		distinct(Nat)           % see full example code below
and so on for each of the characteristics. (Note that a couple of the variables are only mentioned in the final question.) After doing this, there will be 25 named variables (5 lists of 5 variables each) and the problem constraints can now be fairly directly written as `clpBNR` constraints and the variables can be enumerated (labelled). The final step is to output the answer to the specific question stated. The full program code follows:
.pl
	zebra :-  % model the problem as 5 lists of house numbers
		Nat = [English, Spaniard, Japanese, Italian, Norwegian],
		Nat :: integer(1,5), distinct(Nat),
		
		Colour = [Red, Green, White, Yellow, Blue],
		Colour :: integer(1,5), distinct(Colour),
		
		Profession = [Painter, Sculptor, Diplomat, Violinist, Doctor],
		Profession :: integer(1,5), distinct(Profession),
		
		Pet = [Dog, Snails, Fox, Horse, Zebra],
		Pet :: integer(1,5), distinct(Pet),
		
		Drink = [Tea, Coffee, Milk, Juice, Water],
		Drink :: integer(1,5), distinct(Drink),
		
		{  % the actual constraints
		English == Red,
		Spaniard == Dog,
		Japanese == Painter,
		Italian == Tea,
		Norwegian == 1,
		Green == Coffee,
		Green == White + 1,
		Sculptor == Snails,
		Diplomat == Yellow,
		Milk == 3,
		abs(Norwegian - Blue) == 1,
		Violinist == Juice,
		abs(Fox - Doctor) == 1,
		abs(Horse - Diplomat) == 1
		},
		
		enumerate([Nat, Colour, Profession, Pet, Drink]),  % now enumerate all variables
		
		% map nationalities to names for output
		NatNames = [English-english, Spaniard-spaniard, Japanese-japanese,
				Italian-italian, Norwegian-norwegian],
		memberchk(Zebra-ZebraNat, NatNames),
		memberchk(Water-WaterNat, NatNames),
		format("The ~w owns the zebra and the ~w drinks water.\n", [ZebraNat,WaterNat]).
	
	distinct([]) .
	distinct([X|Xs]):- distinct_(Xs,X), distinct(Xs).
	
	distinct_([],_).
	distinct_([X|Xs],Y):- {X<>Y}, distinct_(Xs,Y).
The query:
eg
	?- zebra.
	The japanese owns the zebra and the norwegian drinks water.
	true ;
	false.
Note that enumeration leaves a choicepoint suggesting there may be more than one solution; on backtracking no more are generated. 

<#TableOfContents>

#### Transitive Closure

"The [transitive closure] of a binary relation {`R`} on a set {`X`} is the smallest relation on {`X`} that contains {`R`} and is transitive." For example if {`X`} is a set of cities and the relation {`R`} between two cities means there is a direct flight between them, the transitive closure is the relation defining two cities which are connected by one or more flights.

Among other things, the general notion of transitive closure can be used to determine reachability in a graph ({`R`} defines nearest neighbour) or the functional dependence between attributes in a database ({`R`} specifies which attributes are a direct consequence of other attributes).

An implementation of transitive closure using Prolog lists is fairly straight forward:
.pl
	closure(In, RList, Out) :-
		clos(RList, In, UOut),  % generate and test
		sort(UOut,Out).         % sort for presentation purposes

	clos(Rs, In, Out) :-
		member((I -> O), Rs),   % select R: I -> O
		subset(I, In),          % if I is a subset of In and
		not(subset(O, In)),     % O is not already a subset of In, 
		union(O, In, In1), !,   % add O to In
		clos(Rs, In1, Out).     % and repeat
	clos(Rs, Out, Out).         % quit
Here the binary relation is assumed to be of the form `I -> O`. As an example, here's a list of functional dependancies of a hypothetical database whose attributes are labelled `a` to `k`.
.pl
	fdList([
		[a] -> [b, e, f, g],
		[a, c, d, i] -> [h],
		[c, d] -> [j],
		[c, d, f] -> [k],
		[b] -> [g],
		[c, f] -> [a, b, e],
		[a, c] -> [d],
		[a, d] -> [c],
		[e, g] -> [b]
	]).
This says the value of attribute `a` directly determines the values of attributes `b`, `e`, `f`, and `g`. The collective values of attributes `a`, `c`, `d`, and `i` determine the value of attribute `h`, etc.

With this definition of {`R`}, `closure/3` can be used to ask "*What is the set of attributes that can uniquely (directly or indirectly) be determined from the value of `a`?*". (the binding of `FDs` has been omitted for clarity.)
eg
	?- fdList(FDs), closure([a], FDs, O).
	FDs = ....
	O = [a,b,e,f,g].
Other examples:
eg
	?- fdList(FDs), closure([c,d,f], FDs, O).
	FDs = ....
	O = [a,b,c,d,e,f,g,j,k].

	?- fdList(FDs), closure([c,d], FDs, O).
	FDs = ....
	O = [c,d,j].

	?- fdList(FDs), closure([b], FDs, O).
	FDs = ....
	O = [b,g].

	?- fdList(FDs), closure([a,c,d,i], FDs, O).
	FDs = ....
	O = [a,b,c,d,e,f,g,h,i,j,k].
Implementing transitive closure using constraints requires a different perspective. The general pattern for dealing with this class of combinatoric problems is:
1..
	* Set up the data structures and the declarations for the principle variables. 
	* Set up all the constraints. This part should be strictly deterministic; any non-determinism should be postponed until step 3.
	* Proceed to the enumeration of constrained variables, or other non-deterministic bits. The bulk of the execution time will normally be spent in this section on difficult combinatorial problems, so it should generally not be doing anything other than enumeration. Step 1 should have built data structures so that it is easy to extract the enumeration variables.
	* Once the solution is obtained, there is usually some code required to capture the answer in a suitable form, e.g., for presentation on the terminal or writing to a file.

We'll assume for now that the same `fdList` fact will be used for defining the relation, and the input and output will be the same as the initial Prolog program. However, in step 2 we need to build an intermediate data structure containing constrained variables that can be "enumerated" in step 3. For this purpose, a list of `label=Boolean` pairs will be used. `label` is the attribute name, e.g., `a`,`b`,`c`, etc. The meaning of the associated `Boolean` is as follows: if the variable is `1`, `label` is "reachable", otherwise it isn't. Constraints will be generated from the list of `I->O`'s. For example, `[c, f] -> [a, b, e]` will generate the equivalent of the following constraints:
eg
	{
		(C and F -> A),
		(C and F -> B),
		(C and F -> E)
	}
where `A` is the boolean variable associated with `a`, `B` with `b`, and so on. "`->`" is reused as the constraint operator for boolean implication (`=<` could also be used).

aside> Aside: The somewhat unnatural use of parentheses in the `{}` constraint expression is necessitated by the reuse of the '`->`' operator which has lower binding precedence than '`,`' in most standard Prologs.

The enumeration step (3) just requires that the boolean variable associated with each input `label` is set to `1`; the constraint network will do the rest by propagating 1's to each of the "reachable" labels. Then the output list is just the list of `label`'s whose `Boolean`'s are 1. This constraint based solution looks like:
.pl
	closureCI(In, Rs, Out) :-
		extract_labels(Rs, [], Labels),  % extract labels from Rs and associate booleans
		clos_constrain(Rs,Cs),           % define constraints
		set_bools_(In,Cs),               % initial set
		get_names_(Cs,UOut),             % retrieve all "reachable"
		sort(UOut,Out).                  % sort for presentation purposes

	extract_labels([], Labels, Labels).
	extract_labels([I->O|FDList], In, Labels) :-
		extract_labels(I,In,In1),
		extract_labels(O,In1,In2), !,
		extract_labels(FDList, In2, Labels).
	extract_labels([L|List], In, Labels) :-
		memberchk(L=_,In), !,  % already defined so skip
		extract_labels(List, In, Labels).
	extract_labels([L|List], In, Labels) :-
		extract_labels(List, [L=B|In], Labels).  % add label definition

	clos_constrain([],_).
	clos_constrain([I->O|Rs],Cs) :-
		clos_ins_(I,IExp,Cs),
		clos_outs(O,IExp,Cs),
		clos_constrain(Rs,Cs).

	clos_ins_([A],AV,Cs) :- memberchk(A=AV,Cs),!.
	clos_ins_([A|As],AV and B,Cs) :- memberchk(A=AV,Cs), !, clos_ins_(As,B,Cs).

	clos_outs([],IExp,Cs).
	clos_outs([O|Os],IExp,Cs) :-
		memberchk(O=OV,Cs), !,
		{IExp -> OV},
		clos_outs(Os,IExp,Cs).

	set_bools_([],FDs).
	set_bools_([N|Ns],FDs) :-
		memberchk(N=1,FDs), !,  % finds N=Bn and unifies Bn with 1, use deterministic version
		set_bools_(Ns,FDs).

	get_names_([],[]) :- !.
	get_names_([N=0|FDs],Out) :- !,       % false (not set)
		get_names_(FDs,Out).
	get_names_([N=1|FDs],[N|Out]) :-      % true
		get_names_(FDs,Out).
Using the same `fdList` data (top-level output for `FDs` omitted for clarity):
eg
	?- fdList(FDs), closureCI([a], FDs, O).
	FDs = ....
	O = [a, b, e, f, g].

	?- fdList(FDs), closureCI([c,d,f], FDs, O).
	FDs = ....
	O = [a, b, c, d, e, f, g, j, k].

	?- fdList(FDs), closureCI([c,d], FDs, O).
	FDs = ....
	O = [c, d, j].

	?- fdList(FDs), closureCI([b], FDs, O).
	FDs = ....
	O = [b, g].

	?- fdList(FDs), closureCI([a,c,d,i], FDs, O).
	FDs = ....
	﻿O = [a, b, c, d, e, f, g, h, i, j, k].
But notice that the amount of code has increased, in part because the initial Prolog version was able to take advantage of the predicates `subset/2` and `union/3` in the `lists` utility package. The constraint version doesn't need these, but instead constraints have to be constructed from the data (steps 1 and 2); a step which was unnecessary in the original version. And it also needs to build a suitable output form (step 4) from the constraint data structure (list of `label=Boolean`'s).

Some of this code also depends on the format of the original data, i.e., `fdList/1`. It's worth noting that it's not much more difficult to hand build the constraints rather than use the original data (note that there is no need to declare the constrained variables as `boolean` since that's implied by the operators in the constraint expressions):
.pl
	fdConstraints([a=A,b=B,c=C,d=D,e=E,f=F,g=G,h=H,i=I,j=J,k=K]) :-
		{	(A -> B), (A -> E), (A -> F), (A -> G),
			(A and C and D and I -> H),
			(C and D -> J),
			(C and D and F -> K),
			(B -> G),
			(C and F -> A), (C and F -> B), (C and F -> E),
			(A and C -> D),
			(A and D -> C),
			(E and G -> B)
		}.
and now (this time exposing the internal constraints data structure):
eg
	?- fdConstraints(Cs), set_bools_([c,d,f],Cs), get_names_(Cs,O).
	﻿Cs = [a=1, b=1, c=1, d=1, e=1, f=1, g=1, h=0, i=0, j=1, k=1],
	O = [a, b, c, d, e, f, g, j, k].
So the bulk of the work has shifted to the construction of the constraint network. But, for the most part, this code is deterministic and relatively easy to write, test, and debug. A simple test procedure is just to specify one or more correct answers which, of course, must satisfy the constraints.

There is also a potential significant upside on performance if constraints are used. Boolean satisfiability is the paradigm NP-complete problem: in the worst case one may need to explore `2**N` branches if there are `N` boolean variables to enumerate. The effect of constraints is to reduce this to `2**M` where `M<N`, at the cost of value propagation in the constraint network. But every constraint that forces a variable (thereby avoiding one choice) halves the overall cost.

<#TableOfContents>

#### Structural Analysis of Petri nets

[Petri nets] are widely used to model discrete control systems, transaction systems, and communications protocols. A Petri net consists of a net together with a marking which represents the state of the net. The net is a bipartite graph consisting of places and transitions connected by directed arcs. Arcs connect places to transitions and transitions to places. A marking is a distribution of tokens over the places. Any transition may have input places (where the arc is directed from the place to the transition) and output places (arc from transition to place). A transition can fire if all of its input places have at least one token; firing a transaction removes a token from each input and puts a token into each output place. In general the evolution of the state is non-deterministic as there may be many transitions that can fire for any given marking.

Structural analysis studies properties that depend only on the topology of the network independent of marking. Of particular
importance are structural properties that determine behavioural possibilities, e.g., deadlock. One such property is a *siphon* A Petri net (and hence the process it is modelling) is deadlock free if none of the siphons in the net can be emptied of tokens. Thus, a sub-problem of the structural analysis of a Petri net is to identify all the siphons.

A siphon is defined as a (non-empty) list of the places such that every transition that inputs to it also outputs to it. So for a siphon {`S`} and each transition {`t`}:
`	`{`outputs(t) nn S <> O/ -> i\nputs(t) nn S <> O/`}
or equivalently:
`	`{`i\nputs(t) nn S = O/ -> outputs(t) nn S = O/`}
For each place create a boolean variable `B` interpreted as `B=0` means that it is in the siphon S. Then for each transition `I -> 0`,  map `I` and `O` to their respective associated list of booleans `IB` and translate the above condition to `IB -> OB`. 

Further, let's constrain a siphon to be at least two places but not all the places using the [`cardinality`] predicate defined earlier. The program:
.pl
	siphon(List_of_names):-
		places(Places),
		map_table(Places, Map, Bs),
		findall(T, transition(T), Tlist),   % collect transitions in a list
		map_transitions(Tlist, Map),        % (step 2) define constraints:  definition of siphon
		length(Places,Np),                  %  and a siphon is not [] or all the places
		cardinality(Bs,2,Np-1),
		enumerate(Bs),                      % (step 3)
		select_names(Map, List_of_names).   % (step 4)

	% build 'symbol table' of Place=Boolean for mapping place names, export boolean vector
	map_table([],[],[]).
	map_table([P|Ps], [P=B|Ms], [B|Bs]):- 
		map_table(Ps,Ms,Bs).

	map_transitions([],_).
	map_transitions([I -> O|Ts], Map):-
		map_places(I,Map,IB),  % IB is symbolic conjunction of I
		map_places(O,Map,OB),  % OB is symbolic conjunction of O
		{IB -> OB},            % for any transition, no inputs in siphon implies no outputs in siphon
		map_transitions(Ts, Map).

	map_places([],_,1).  % conjunction so [] is 'true'
	map_places([P|Ps], Map, PB and B):- 
		memberchk(P=PB, Map), !,
		map_places(Ps,Map,B).

	% convert solution to list of place names
	select_names([], []).
	select_names([P=0|Ms], [P|Ps]) :- !, select_names(Ms,Ps).  % B=0 means P is in the siphon
	select_names([P=1|Ms], Ps)     :- select_names(Ms,Ps).     % P not in the siphon
An example Petri net:
.pl
	places([a,b,c,d,e,f,g,h,i,j,k]).

	transition([a,d] -> [c]).
	transition([c] -> [b,d]).
	transition([b] -> [a]).
	transition([b] -> [d,e,h]).
	transition([e] -> [f,i]).
	transition([f] -> [g]).
	transition([g] -> [e]).
	transition([i,j] -> [h,k]).
	transition([k] -> [j]).
and its siphons:
eg
	?- siphon(X),X\=[],writeln(X),fail.
	[a,b,c,d,e,f,g,h,i,k]
	[a,b,c,d,e,f,g,h,i]
	[a,b,c,d,e,f,g,h,j,k]
	[a,b,c,d,e,f,g,i,j,k]
	[a,b,c,d,e,f,g,i,k]
	[a,b,c,d,e,f,g,i]
	[a,b,c,d,e,f,g,j,k]
	[a,b,c,d,e,f,g]
	[a,b,c,d,h,j,k]
	[a,b,c,d,j,k]
	[a,b,c,d]
	[a,b,c,e,f,g,h,i,j,k]
	[a,b,c,e,f,g,h,i,k]
	[a,b,c,e,f,g,h,i]
	[a,b,c,e,f,g,h,j,k]
	[a,b,c,e,f,g,i,j,k]
	[a,b,c,e,f,g,i,k]
	[a,b,c,e,f,g,i]
	[a,b,c,e,f,g,j,k]
	[a,b,c,e,f,g]
	[a,b,c,h,j,k]
	[a,b,c,j,k]
	[a,b,c]
	[b,c,d,e,f,g,h,i,j,k]
	[b,c,d,e,f,g,h,i,k]
	[b,c,d,e,f,g,h,i]
	[b,c,d,e,f,g,h,j,k]
	[b,c,d,e,f,g,i,j,k]
	[b,c,d,e,f,g,i,k]
	[b,c,d,e,f,g,i]
	[b,c,d,e,f,g,j,k]
	[b,c,d,e,f,g]
	[b,c,d,h,j,k]
	[b,c,d,j,k]
	[b,c,d]
	[j,k]
	false.
A minimal siphon is a siphon which doesn't contain another siphon. To find the list of minimal siphons from the list of siphons:
.pl
	minimal_siphons(Siphons,Minimal) :-
		minimal_siphons_(Siphons,[],Minimal).

	minimal_siphons_([],Minimal,Minimal).
	minimal_siphons_([S|Ss],Mins,Minimal) :-
		contains_subset(Ss,S), !,              % succeeds if a member of Ss is a subset of S
		minimal_siphons_(Ss,Mins,Minimal).
	minimal_siphons_([S|Ss],Mins,Minimal) :-   % S must be a minimal siphon
		minimal_siphons_(Ss,[S|Mins],Minimal).

	contains_subset([S1|Ss],S) :-
		subset(S1,S),!.
	contains_subset([S1|Ss],S) :-
		contains_subset(Ss,S).
and use `findall/3`:
eg
	?- findall(S,siphon(S),Ss),minimal_siphons(Ss,Mins).
	﻿Ss = [[a, b, c, d, e, f, g, h, i, k], [a, b, c, d, e, f, g, h, i], [a, b, c, d, e, f, g, h, j, k], [a, b, c, d, e, f, g, i, j, k], [a, b, c, d, e, f, g, i, k], [a, b, c, d, e, f, g, i], [a, b, c, d, e, f, g, j, k], [a, b, c, d, e, f, g], [a, b, c, d, h, j, k], [a, b, c, d, j, k], [a, b, c, d], [a, b, c, e, f, g, h, i, j, k], [a, b, c, e, f, g, h, i, k], [a, b, c, e, f, g, h, i], [a, b, c, e, f, g, h, j, k], [a, b, c, e, f, g, i, j, k], [a, b, c, e, f, g, i, k], [a, b, c, e, f, g, i], [a, b, c, e, f, g, j, k], [a, b, c, e, f, g], [a, b, c, h, j, k], [a, b, c, j, k], [a, b, c], [b, c, d, e, f, g, h, i, j, k], [b, c, d, e, f, g, h, i, k], [b, c, d, e, f, g, h, i], [b, c, d, e, f, g, h, j, k], [b, c, d, e, f, g, i, j, k], [b, c, d, e, f, g, i, k], [b, c, d, e, f, g, i], [b, c, d, e, f, g, j, k], [b, c, d, e, f, g], [b, c, d, h, j, k], [b, c, d, j, k], [b, c, d], [j, k]],
	Mins = [[j, k], [b, c, d], [a, b, c]].

A complementary concept to a siphon in a Petri net is a trap: a (non-empty) list of the places such that every transition that outputs to it also inputs from it. If a trap ever contains tokens, it will always contain tokens. The program above can be trivially converted to finding traps by reversing the transition constraint, i.e., `{OB -> IB}` instead of `{IB -> OB}`.

For more on siphons and traps in Petri nets see [Siphons and Traps Structural Analysis Techniques Behaviour of a Petri Nets].

<#TableOfContents>

#### "Money" Cryptographic Puzzle

There are numerous constraint puzzles in the integer domain and one of the classics is "SEND MORE MONEY" which finds values corresponding to the letters in the sum:
		 SEND
		+MORE
		-----
		MONEY
Leading 0's are not allowed so the constraints are defined by:
.pl
	sendmoremoney([S,E,N,D,M,O,R,Y]) :-
		[S,M]::integer(1,9),           % no leading 0's on any number
		[E,N,D,O,R,Y]::integer(0,9),
		distinct([S,E,N,D,M,O,R,Y]),   % all variables distinct
		{	          1000 *(S+M)+ 100 *(E+O)+ 10 *(N+R) + (D+E) ==
			10000*M + 1000 *   O + 100 *   N + 10 *   E  +  Y }.

	distinct([]) .
	distinct([X|Xs]):- distinct(Xs,X), distinct(Xs).
	
	distinct([],_).
	distinct([X|Xs],Y):- {X<>Y}, distinct(Xs,Y).
The constraints by themselves are insufficient to produce a solution:
eg
	?- sendmoremoney([S,E,N,D,M,O,R,Y]).
	﻿S = 9,
	M = 1,
	O = 0,
	E::integer(4, 7),
	N::integer(5, 8),
	D::integer(2, 8),
	R::integer(2, 8),
	Y::integer(2, 8).
But solving (searching) for `E` produces the answer:
eg
	?- sendmoremoney([S,E,N,D,M,O,R,Y]),solve(E).
	S = 9,
	E = 5,
	N = 6,
	D = 7,
	M = 1,
	O = 0,
	R = 8,
	Y = 2 ;
	false.
The result may depend on which letter is chosen, for example:
eg
	?- sendmoremoney([S,E,N,D,M,O,R,Y]),solve(R).
	﻿S = 9,
	M = 1,
	O = 0,
	R = 8,
	E::integer(5, 6),
	N::integer(6, 7),
	D::integer(2, 7),
	Y::integer(2, 7).
When in doubt, `solve/1` can be used on more than one (or all) of the variables:
eg
	?- sendmoremoney([S,E,N,D,M,O,R,Y]),solve([S,E,N,D,M,O,R,Y]).
	S = 9,
	E = 5,
	N = 6,
	D = 7,
	M = 1,
	O = 0,
	R = 8,
	Y = 2 ; 
	false.
`solve/1` is a general purpose predicate that can be used for both `real` and `integer` (including `boolean`) intervals. (If the number of intervals and their domain sizes  are small, `enumerate/1` may be slightly more efficient.) `solve` is an effective method of searching for point solutions as it avoids splitting intervals on solutions. Splitting on a solution is undesirable in that it can result in multiple answers for the same solution. (Other applications discussed below are better addressed by `splitsolve/1` which does a general bifurcating search.) 

The implementation of '`<>`' in CLP(BNR) is not particularly effective since a domain cannot be a set of disjoint ranges as in some other finite domain constraint systems. Problems that fit into this problem space and where efficiency is a concern, would be better solved by a different CLP package.

<#TableOfContents>

#### Magic Series

A "magic series" of order `N` can be thought of as finding a sequence `T = [M0, M1, ... Mn]` such that `T` contains `M0` occurrences of `0`, `M1` occurrences of `M1`, ... , and `Mn` occurrences of `Mn`. The first problem is to define what `M` occurrences of a member of a list means in terms of constraints. One possibility is to use the cardinality concept to count boolean variables which indicate whether the corresponding item is an occurrence or not:
.pl
	occurrences(X,List,N):- 
		N::integer(0,_),           % number of occurrences is positive
		occurrenceBs_(List,X,Bs),  % create booleans which are true if corresponding list element is an occurrence
		sym_sum(Bs,S), {N == S}.   % sum booleans to find number of occurrences

	occurrenceBs_([], _, []).
	occurrenceBs_([X|Xs], Y, [B|Bs]) :- 
		{B == (X==Y)},             % B is true if X is an occurrence of Y
		occurrenceBs_(Xs,Y,Bs).

	sym_sum([], 0).
	sym_sum([X|Xs], X+S) :- sym_sum(Xs, S).
Note the boolean constraint `{B == (X==Y)}` which means `B` is `1` (true) if `X` (a member of `List`) is numerically equal to `Y` even though `X` and `Y` are unknown. Given this definition of `occurrences/3`, it's straight forward to specify the constraints of a magic series of length `N`:
.pl
	magic_series1(N, Ks) :- 
		length(Ks,N), Ks::integer(0,N),
		magic_(Ks, 0, Ks).

	magic_([], N, _).
	magic_([K|Ks],N,KS):- 
		occurrences(N, KS, K),
		N1 is N+1,
		magic_(Ks,N1,KS).
For `N=4` and `N=10`:
eg
	?- magic_series1(4,M),enumerate(M).
	M = [1,2,1,0] ;
	M = [2,0,2,0] ;
	false.
	
	?- magic_series1(10,M),enumerate(M).
	M = [6,2,1,0,0,0,1,0,0,0] ;
	false.

	?- clpStatistics,magic_series1(10,M),findall(M,enumerate(M),Ms),clpStatistics(SS).
	M = [_A, _B, _C, _D, _E, _F, _G, _H, _I, _J],
	Ms = [[6, 2, 1, 0, 0, 0, 1, 0, 0, 0]],
	SS = [userTime(0.13800300000000004), gcTime(0.0), globalStack(54440/524256), trailStack(664/264168), localStack(2152/118648), inferences(978515), narrowingOps(33577), narrowingFails(73), node_count(190), max_iterations(484/3000)],
	_A::integer(0, 10),
	_B::integer(0, 10),
	_C::integer(0, 10),
	_D::integer(0, 10),
	_E::integer(0, 10),
	_F::integer(0, 10),
	_G::integer(0, 10),
	_H::integer(0, 10),
	_I::integer(0, 10),
	_J::integer(0, 10).
Looking at the statistics for `N=10`, we see that finding the single solution took 33577 narrowing operations with 73 failures.

In thinking about the problem, you may have discovered that the sum of the the series must equal its length (the total number of elements). If this fact is used as a redundant constraint:
.pl
	magic_series2(N, Ks) :-
		length(Ks,N), Ks::integer(0,_),
		sym_sum(Ks, S), {S==N},            % <== redundant constraint
		magic_(Ks, 0, Ks).
Now:
eg
	?- clpStatistics,magic_series2(10,M),findall(M,enumerate(M),Ms),clpStatistics(SS).
	M = [_A, _B, _C, _D, _E, _F, _G, _H, _I, _J],
	Ms = [[6, 2, 1, 0, 0, 0, 1, 0, 0, 0]],
	SS = [userTime(0.049680999999999975), gcTime(0.001), globalStack(57504/524256), trailStack(1752/264168), localStack(2152/118648), inferences(344821), narrowingOps(10272), narrowingFails(41), node_count(199), max_iterations(630/3000)],
	_A::integer(0, 10),
	_B::integer(0, 10),
	_C::integer(0, 10),
	_D::integer(0, 10),
	_E::integer(0, 10),
	_F::integer(0, 10),
	_G::integer(0, 10),
	_H::integer(0, 10),
	_I::integer(0, 10),
	_J::integer(0, 10).
By forcing earlier failure during the enumeration, the redundant constraint reduces the number of narrowing operations by over a factor of 3. This more than outweighs the additional cost of creating and checking that constraint.

One can take this even further by noting that `N` also equals the sum of `M*Mn`:
.pl
	magic_series3(N, Ks) :-
		length(Ks,N), Ks::integer(0,_),
		sum(Ks, S), {S==N},            % <== redundant constraint
		sumProd_(Ks, 0, M), {M==N},    % <== second redundant constraint
		magic_(Ks, 0, Ks).

	sumProd_([], _, 0).
	sumProd_([K|Ks], N, K*N+S):-  % summation of j*K(j), j=0,N-1
		N1 is N+1,
		sumProd_(Ks,N1,S).
leading to further factor of more than 2:
eg
	?- clpStatistics,magic_series3(10,M),findall(M,enumerate(M),Ms),clpStatistics(SS).
	M = [_A, _B, _C, _D, _E, _F, _G, _H, _I, _J],
	Ms = [[6, 2, 1, 0, 0, 0, 1, 0, 0, 0]],
	SS = [userTime(0.019751000000000074), gcTime(0.0), globalStack(221824/524256), trailStack(29112/264168), localStack(2152/118648), inferences(131353), narrowingOps(3082), narrowingFails(41), node_count(159), max_iterations(247/3000)],
	_A::integer(0, 10),
	_B::integer(0, 10),
	_C::integer(0, 5),
	_D::integer(0, 3),
	_E::integer(0, 2),
	_F::integer(0, 2),
	_G::boolean,
	_H::boolean,
	_I::boolean,
	_J::boolean.
Note that the solution space is considerably reduced (see domains of `M`) even before the enumeration step.

The lesson here is that even though redundant constraints may not be necessary to finding solutions, they can considerably speed up the enumeration process and may even make it unnecessary.

<#TableOfContents>

@include
	CLPBNR_UC_optionTrading.myw
	CLPBNR_UC_salesman.myw
	CLPBNR_UC_timingAnalysis.myw
	CLPBNR_UC_polynomialRoots.myw
	CLPBNR_UC_linearsys.myw
	CLPBNR_UC_metaContractors.myw
	CLPBNR_UC_globalopt.myw
	CLPBNR_UC_scheduling.myw
	CLPBNR_UC_integrate.myw
&
	[transitive closure] <- link https://en.wikipedia.org/wiki/Transitive_closure
	// [Boolean satisfiability problem] <- link https://en.wikipedia.org/wiki/Boolean_satisfiability_problem
	// [NP-complete]        <- link https://en.wikipedia.org/wiki/NP-completeness
	[`cardinality`]      <- link #cardinality
	[Petri nets]         <- link https://en.wikipedia.org/wiki/Petri_net
	[Siphons and Traps Structural Analysis Techniques Behaviour of a Petri Nets] <- link https://www.academia.edu/19468769/Siphons_and_Traps_Structural_Analysis_Techniques_Behaviour_of_a_Petri_Nets
	//[Solving linear, min and max constraint systems using CLP based on relational interval arithmetic] <- link https://www.sciencedirect.com/science/article/pii/S0304397596001983
	//[Mean value theorem] <- link https://en.wikipedia.org/wiki/Mean_value_theorem
	// [`library(yall)`] <- link https://www.swi-prolog.org/pldoc/man?section=yall
