#### Using Metalevel Contractors

Other implementations of CLP over intervals have been characterized as either "RISC" or "CISC" designs (see [CLIP]). In the RISC approach each constraint is broken down into a sequence of low level primitives which are "executed" by the constraint engine (fixed point iterator). However, as seen in previous examples, narrowing of the internal fixed point iteration can be weak due to the dependency issue. CISC systems try to address this problem by treating the constraint as a single enity but this requires a more powerful solver. CLIP and CLP(BNR) are RISC designs; [Newton] and [Numerica] are CISC designs. To overcome some of the RISC limitations, CLIP introduced the concept of metalevel contractors which are a way of adding redundant constraints which can accelerate the convergence of the fixed point iteration. Relative to CISC designs, this has performance implications, but can be accomplished without complicating the underlying constraint infrastructure.

aside> Aside: With conventional floating point arithmetic, adding redundant equations must be done carefully because they can exacerbate problems caused by rounding errors. Using sound interval arithmetic, these problems are avoided and redundancy can be used to accelerate convergence. (See also [Algorithmic Power from Declarative Use of Redundant Constraints]).

A contractor is just a procedure which forces some narrowing operation on a set of intervals. `solve`, `splitsolve` and `absolve`, as defined in the `clpBNR` package, are contractors bundled with an iterating algorithm that terminates when some condition is met, e.g., the width of the interval(s) is less than some value. Module `clpBNR_toolkit` (included with pack `clpBNR`) exports additional contractors that split intervals at their midpoint; `mid_split_one/1` selects the largest interval (by width) from a list. It uses `mid_split/1` which takes a single interval as its argument and splits it as long as the interval doesn't pass the `small` test, as defined by `clpBNR:small/1`. The implementation looks like:
.pl
	%
	% contractor to split a single interval on midpoint if sufficiently wide (creates a choicepoint)
	%
	mid_split(X) :- small(X), !.    % too narrow to split
	mid_split(X) :-
		M is midpoint(X),
		({X=<M} ; {M=<X}).
If the interval is splittable, a constraint is applied to first test the lower half of the interval leaving a choicepoint due to `;/2` so the upper half will be tested on backtracking. The obvious redundant constraints provide no additional information but merely define two halves of the problem that can be independently explored, hopefully resulting in failure so that the interval can be narrowed to the other half. If further splitting is required, an iterator becomes necessary to keep the process going. Module `clpBNR_toolkit` exports `iterate_until/3` for that purpose:
.pl
	%
	% General purpose iterator: execute Goal a maximum of N times or until Test succeeds
	%
	iterate_until(N,Test,Goal) :- N>0, !, 
		Goal,
		N1 is N-1,
		(Test
		 -> true
		  ; iterate_until(N1,Test,Goal)
		).
	iterate_until(_N,_,_).  % non-positive N --> exit
The labelling predicates exported from module `clpBNR`, e.g., `solve` and `splitsolve`, include both a contractor and an iterator. The contractor implemented by `splitsolve/1` is equivalent to `midpoint_split_one/1` which is also exported by `clpBNR_toolkit`; it takes a a list of intervals, selects the one with the largest width, and then uses `mid_split/1` (described above).   

A few simple examples from previous sections using the `mid_split` and `mid_split_one` contractors with `iterate_until`:
eg
	?- X::real, {X**4-4*X**3+4*X**2-4*X+3==0}, iterate_until(50,small(X),mid_split(X)).
	X:: 1.000000... ;
	X:: 3.00000... ;
	false.
	
	?- {X**2+Y**2==2, Y-X**2==0}, iterate_until(50,small([X,Y]),mid_split_one([X,Y])).
	X:: -1.00000000000000...,
	Y:: 1.00000000000000... ;
	X:: 1.00000000000000...,
	Y:: 1.00000000000000... .
 In each case the contractor `mid_split_one` is used until the limit of 50 iterations is reached or until all variables are "small" enough (as defined by `clpBNR:small/1`). This demonstrates the general principle of combining a general purpose iterator with a simple contractor but the real value comes when the functionality of built-in CISC style contractors can be replicated in much the same way.
 
##### A Multivariate Taylor Contractor

The Taylor series expansion of a function can be used to define redundant constraints which can accelerate the convergence of the fixed point iteration. For a multivariate equation of the form 
math>  f(x_1,...x_i,...x_n) = 0
a redundant constraint of the form
math>  0 = f(a_i)+f'(xi_i)*(x_i-a_i) , xi_i = a_i+t_i*(x_i-a_i) , 0<=t_i<=1
can be added for each {`i`}, where {`a_i`} is some value in the domain of {`x_i`}. Usually the best convergence occurs when {`a_i`} is the midpoint of {`x_i`}. (For a more complete description of the underlying math see [CLIP].)

The `clpBNR_toolkit` exports `taylor_contractor/2` which takes an equation of the form `E1 == E2` and generates a centred form contractor `cf_contractor(Xs,As)` which can be used in an iterator in much the same way as `mid_split` in the example above. Note that the act of constructing a Taylor contractor is separate from applying it (using `iterate_until/3`). In the process, the original equation (as a constraint) and any redundant constraints are added to the system. There is a requirement that the expression `E1-E2` be differentiable over the range of the variables it contains. The `Xs` and `As` correspond to the {`x_i`}'s and {`a_i`}'s in the equations defined above.

The actual code to build the Taylor contractor is somewhat complicated but it essentially applies additional constraints which improve narrowing convergence. (See the source code for `clpBNR_toolkit` for details.) These constraints are fired when the constructed centred form contractor is called within an iteration loop, effectively replacing the search strategy of `solve/1` which creates sub-problems by splitting intervals in hope that many of the sub-problems contain no solutions. The alternative to `solve/1` when using a centred form contractor is `cf_solve/1` which takes as its single argument a centred form contractor such as that generated by `taylor_contractor/2`.  Used in this way, contractors can be can be used as an alternative to `solve` and `absolve` to find roots of polynomial equations (as done in [Solving Polynomial Equations in one Variable]).  In general, this provides better results (narrower intervals and fewer "false positives") in a fraction of the time: 
eg
	?- X::real, taylor_contractor({X**2-4*X+3==0},T), cf_solve(T).
	T = cf_contractor([X], [_A]),
	X:: 1.000000000000000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 3.00000000000000...,
	_A::real(-1.0Inf, 1.0Inf).
	
	?- X::real, taylor_contractor({17*X**256+35*X**17-99*X==0},T), cf_solve(T).
	T = cf_contractor([X], [_A]),
	X:: 0.0000000000000000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 1.005027892894011...,
	_A::real(-1.0Inf, 1.0Inf).
	
	?- X::real, taylor_contractor({35*X**256-14*X**17+X==0},T), cf_solve(T).
	T = cf_contractor([X], [_A]),
	X:: -0.847943660827315...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 0.0000000000000000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 0.847943660827315...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 0.995842494200498...,
	_A::real(-1.0Inf, 1.0Inf).
	
	?- X::real, taylor_contractor({X**4-12*X**3+47*X**2-60*X==0},T), cf_solve(T).
	T = cf_contractor([X], [_A]),
	X:: 0.0000000000000000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 3.00000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 4.00000000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 5.0000000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	false.
	
	?- X::real, taylor_contractor({X**2-2*X+1==0},T), cf_solve(T).
	T = cf_contractor([X], [_A]),
	X:: 0.99999...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 0.999996...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 0.999999...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 1.00000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 1.000001...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 1.000003...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 1.000010...,
	_A::real(-1.0Inf, 1.0Inf) ;
	T = cf_contractor([X], [_A]),
	X:: 1.000011...,
	_A::real(-1.0Inf, 1.0Inf) ;
	false.
	
	?- X::real, taylor_contractor({X**2-2*X+1==0},T), cf_solve(T,8).
	T = cf_contractor([X], [_A]),
	X:: 1.00000...,
	_A::real(-1.0Inf, 1.0Inf) ;
	false.
(The last example demonstrates how to use the precision value to eliminate even more false positives.)

Comparing `solve` and iteration using the metalevel Taylor contractor in terms of narrowing operations performed (should be relatively implementation and machine independent). And for a subset of the examples the effects of using Horner notation has been added to highlight the effects of combining techniques:
.myw
	.tsv
		Polynomial						`solve`			`solve_Hnr`		`Taylor`		`Taylor_Hnr`
		`X**2-4*X+3`					`    778`		`     237`		`  1328`		`    494`
		`X**4-4*X**3+4*X**2-4*X+3`		`  22291`		`    4882`		` 15622`		`   8611`
		`17*X**256+35*X**17-99*X`		`    227`		` `				`   308`		` `
		`35*X**256-14*X**17+X`			`   2434`		` `				`   848`		` `
		`X**4-12*X**3+47*X**2-60*X`		` 355136`		`   21609`		` 20987`		`  24307`
		`X**2-2*X+1`					`2000474`		`  967927`		`135462`		`  99332`
	&	// local styles for table
		@css
			table.my_array { border-collapse:collapse; }
			table.my_array tr td { background:whitesmoke; padding: 4px 16px; }
			table.my_array tr:nth-child(1) td { background:lightgray; }

Other than the simple cases where minimal splitting is required, iteration using the Taylor contractor is significantly faster (sometimes by a factor of 20) and does a better job at eliminating false positives due to precision limits. Combining contractors with Horner representation can yield further gains in many (but not all) cases. (Multiple roots at one value are usually problematical since it can be difficult to separate them within precision limits; as an exercise try `X**4-X**3-3*X**2+5*X-2` which has a root at `X= -2` and a triple root at `X=1`.)

Problems involving multiple variables typically require more than one equation. Since the variables are shared, the generated Taylor contractors (one per equation) can be merged into a single contractor by omitting duplicates. `taylor_contractor/2` also accepts a sequence or list of equations and constructs a single `cf_contractor` for use in an iterator. Examples of using this predicate follow.

##### The Numerica "Combustion" Problem

An example problem from [Numerica] from (taken from A. P. MORGAN, Solving Polynomial Systems Using Continuation for Scientific and Engineering Problems, Prentice-Hall, 1987) refers to a combustion problem for a temperature of 3000˚ represented by a system of 9 equations in 9 unknowns. Expressed in Prolog it looks like:
.pl
	combustion(
		[X1,X2,X3,X4,X5,X6,X7,X8,X9,X10],
		[X2+2*X6+X9+2*X10 == 1e-5,
		 X3+X8 == 3e-5,
		 X1+X3+2*X5+2*X8+X9+X10 == 5e-5,
		 X4+2*X7 == 1e-5,
		 0.5140437e-7*X5 == X1**2,
		 0.1006932e-6*X6 == 2*X2**2,
		 0.7816278e-15*X7 == X4**2,
		 0.1496236e-6*X8 == X1*X3,
		 0.6194411e-7*X9 == X1*X2,
		 0.2089296e-14*X10 == X1*X2**2
		]
		).
Because there is only a single occurrence of any variable in any equation, the fixed point iteration forces considerable narrowing by itself:
eg
	?- combustion(Vs,Es), Vs::real(0,1), {Es}.
	Vs = [_A, _B, _C, _D, _E, _F, _G, _H, _I, _J],
	Es = [_B+2*_F+_I+2*_J==1.0e-5, _C+_H==3.0e-5, _A+_C+2*_E+2*_H+_I+_J==5.0e-5, _D+2*_G==1.0e-5, 5.140437e-8*_E==_A**2, 1.006932e-7*_F==2*_B**2, 7.816278e-16*_G==_D**2, 1.496236e-7*_H==_A*_C, 6.194411e-8*_I==_A*_B, 2.089296e-15*_J==_A*_B**2],
	_A:: 0.0000001...,
	_B:: 0.0000002...,
	_C:: 0.00001...,
	_D:: 0.0000000000625149...,
	_E:: 0.000000...,
	_F:: 0.000001...,
	_G:: 0.0000049999687425...,
	_H:: 0.00001...,
	_I:: 0.000000...,
	_J:: 0.000003... .
Adding `solve` further refines the answer:
eg
	?- combustion(Vs,Es), Vs::real(0,1), {Es}, solve(Vs).
	Vs = [_A, _B, _C, _D, _E, _F, _G, _H, _I, _J],
	Es = [_B+2*_F+_I+2*_J==1.0e-5, _C+_H==3.0e-5, _A+_C+2*_E+2*_H+_I+_J==5.0e-5, _D+2*_G==1.0e-5, 5.140437e-8*_E==_A**2, 1.006932e-7*_F==2*_B**2, 7.816278e-16*_G==_D**2, 1.496236e-7*_H==_A*_C, 6.194411e-8*_I==_A*_B, 2.089296e-15*_J==_A*_B**2],
	_A:: 0.0000001471...,
	_B:: 0.0000002262...,
	_C:: 0.00001512...,
	_D:: 0.0000000000625149...,
	_E:: 0.000000420...,
	_F:: 0.000001016...,
	_G:: 0.0000049999687425...,
	_H:: 0.00001487...,
	_I:: 0.000000537...,
	_J:: 0.000003602... .
The same problem using a metalevel contractor:
eg 
	?- combustion(Vs,Es), Vs::real(0,1), taylor_contractor({Es},T), cf_solve(T).
	Vs = [_A, _B, _C, _D, _E, _F, _G, _H, _I, _J],
	Es = [_B+2*_F+_I+2*_J==1.0e-5, _C+_H==3.0e-5, _A+_C+2*_E+2*_H+_I+_J==5.0e-5, _D+2*_G==1.0e-5, 5.140437e-8*_E==_A**2, 1.006932e-7*_F==2*_B**2, 7.816278e-16*_G==_D**2, 1.496236e-7*_H==_A*_C, 6.194411e-8*_I==_A*_B, 2.089296e-15*_J==_A*_B**2],
	T = cf_contractor([_G, _D, _E, _A, _H, _C, _J, _I, _F, _B], [_K, _L, _M, _N, _O, _P, _Q, _R, _S, _T]),
	_A:: 0.0000001...,
	_B:: 0.0000002...,
	_C:: 0.00001...,
	_D:: 0.0000000000625149...,
	_E:: 0.000000...,
	_F:: 0.000001...,
	_G:: 0.0000049999687425...,
	_H:: 0.00001...,
	_I:: 0.000000...,
	_J:: 0.000003...,
	_T::real(-1.0Inf, 1.0Inf),
	_S::real(-1.0Inf, 1.0Inf),
	_R::real(-1.0Inf, 1.0Inf),
	_Q::real(-1.0Inf, 1.0Inf),
	_P::real(-1.0Inf, 1.0Inf),
	_O::real(-1.0Inf, 1.0Inf),
	_N::real(-1.0Inf, 1.0Inf),
	_M::real(-1.0Inf, 1.0Inf),
	_L::real(-1.0Inf, 1.0Inf),
	_K::real(-1.0Inf, 1.0Inf).
This halts when the default precision limit is reached (`clpBNR_default_precision= 6`). To achieve the same precision as `solve`, it is necessary to tune the test via the second argument to `cf_solve`,to get the same precision:
eg
	?- combustion(Vs,Es), Vs::real(0,1), taylor_contractor({Es},T), cf_solve(T,9).
	Vs = [_A, _B, _C, _D, _E, _F, _G, _H, _I, _J],
	Es = [_B+2*_F+_I+2*_J==1.0e-5, _C+_H==3.0e-5, _A+_C+2*_E+2*_H+_I+_J==5.0e-5, _D+2*_G==1.0e-5, 5.140437e-8*_E==_A**2, 1.006932e-7*_F==2*_B**2, 7.816278e-16*_G==_D**2, 1.496236e-7*_H==_A*_C, 6.194411e-8*_I==_A*_B, 2.089296e-15*_J==_A*_B**2],
	T = cf_contractor([_G, _D, _E, _A, _H, _C, _J, _I, _F, _B], [_K, _L, _M, _N, _O, _P, _Q, _R, _S, _T]),
	_A:: 0.00000014709...,
	_B:: 0.0000002262...,
	_C:: 0.000015128...,
	_D:: 0.0000000000625149...,
	_E:: 0.0000004209...,
	_F:: 0.000001016...,
	_G:: 0.0000049999687425...,
	_H:: 0.000014872...,
	_I:: 0.0000005371...,
	_J:: 0.000003602...,
	_T::real(-1.0Inf, 1.0Inf),
	_S::real(-1.0Inf, 1.0Inf),
	_R::real(-1.0Inf, 1.0Inf),
	_Q::real(-1.0Inf, 1.0Inf),
	_P::real(-1.0Inf, 1.0Inf),
	_O::real(-1.0Inf, 1.0Inf),
	_N::real(-1.0Inf, 1.0Inf),
	_M::real(-1.0Inf, 1.0Inf),
	_L::real(-1.0Inf, 1.0Inf),
	_K::real(-1.0Inf, 1.0Inf).
The builtin `solve` and fixed point iteration does a credible job on this problem so it turns out adding the metalevel contractor redundant constraints is not worth the additional overhead incurred. It is often the case some experimentation is required to achieve required precision within a given time budget.

##### The Broyden Banded Function

A common example in interval arithmetic publications is the Broyden banded function which defines the following system of {`n`} equations in {`n`} variables {`{x_1,...,x_n}`}:
math> x_i*(2+5x_i^2) = sum_(i-5<=j<=i+1,j!=i,jin[1,n])x_j*(x_j+1)
A predicate to generate this set of equations for different values of `N`:
.pl
	broyden(N,Vs,EQs) :-
		length(Vs,N),
		cbbf(1,N,Vs,Vs,EQs), !.
	
	cbbf(I, N, [Xi|Xs], L, [2*Xi + 5*Xi**3 + 1 == Si|Rest]) :-   % rewrite Xi*(2+5*Xi**2) + 1 == Si
		make_si(1,I,N,L,0,Si),
		I1 is I+1,
		cbbf(I1,N,Xs,L,Rest).
	cbbf(_I,_N,[],_,[]).
	
	make_si(J,_,N,_,S,S)         :- J > N , !.                       % terminate
	make_si(J,I,N,[Xj|Xs],S1,S)  :- I-5 =< J, J =< I+1, I\==J,  !,   % add a term
	  J1 is J+1,
	  make_si(J1,I,N,Xs,S1 + Xj*(1+Xj),S).
	make_si(J,I,N,[_Xj|Xs],S1,S) :-                                  % skip
	  J1 is J+1,
	  make_si(J1,I,N,Xs,S1,S).
Using `solve` will generate the correct result; for `N=5`:
eg
	?- broyden(5,Vs,Es), Vs::real(-1,1), {Es}, solve(Vs).
	Vs = [_A, _B, _C, _D, _E],
	Es = [2*_A+5*_A**3+1==0+_B*(1+_B), 2*_B+5*_B**3+1==0+_A*(1+_A)+_C*(1+_C), 2*_C+5*_C**3+1==0+_A*(1+_A)+_B*(1+_B)+_D*(1+_D), 2*_D+5*_D**3+1==0+ ... * ... + _B*(... + ...)+_C*(1+_C)+_E*(1+_E), 2*_E+5* ... ** ... + 1== ... + ... + ... * ... + _C*(... + ...)+_D*(1+_D)],
	_A:: -0.4283028...,
	_B:: -0.47659653...,
	_C:: -0.5196377...,
	_D:: -0.5588619...,
	_E:: -0.5588619... .
Using a Taylor contractor:
eg
	?- broyden(5,Vs,Es), Vs::real(-1,1), taylor_contractor({Es},T), cf_solve(T).
	Vs = [_A, _B, _C, _D, _E],
	Es = [2*_A+5*_A**3+1==0+_B*(1+_B), 2*_B+5*_B**3+1==0+_A*(1+_A)+_C*(1+_C), 2*_C+5*_C**3+1==0+_A*(1+_A)+_B*(1+_B)+_D*(1+_D), 2*_D+5*_D**3+1==0+_A*(1+_A)+_B*(1+_B)+_C*(1+_C)+_E*(1+_E), 2*_E+5*_E**3+1==0+_A*(1+_A)+_B*(1+_B)+_C*(1+_C)+_D*(1+_D)],
	T = cf_contractor([_E, _D, _C, _B, _A], [_F, _G, _H, _I, _J]),
	_A:: -0.428302...,
	_B:: -0.476596...,
	_C:: -0.519637...,
	_D:: -0.558862...,
	_E:: -0.558862...,
	_J::real(-1.0Inf, 1.0Inf),
	_I::real(-1.0Inf, 1.0Inf),
	_H::real(-1.0Inf, 1.0Inf),
	_G::real(-1.0Inf, 1.0Inf),
	_F::real(-1.0Inf, 1.0Inf) ;
	false.
Comparing performance, using the Taylor contractor produces an approximately equivalent answer than `solve` in a less than half the time for small values of `N` (e.g., 5), and even better performance for larger `N`. Furthermore, it scales (approximately) linearly with `N` and is fairly insensitive to the initial range: 
eg
	?- broyden(20,Vs,Es), Vs::real, taylor_contractor({Es},T), cf_solve(T).
	Vs = [_A, _B, _C, _D, _E, _F, _G, _H, _I|...],
	Es = [2*_A+5*_A**3+1==0+_B*(1+_B), 2*_B+5*_B**3+1==0+_A*(1+_A)+_C*(1+_C), 2*_C+5*_C**3+1==0+_A*(1+_A)+_B*(1+_B)+_D*(1+_D), 2*_D+5*_D**3+1==0+ ... * ... + _B*(... + ...)+_C*(1+_C)+_E*(1+_E), 2*_E+5* ... ** ... + 1== ... + ... + ... * ... + _D*(... + ...)+_F*(1+_F), ... * ... + ... * ... + 1== ... + ... + ... * ... + _G*(... + ...), ... + ... + 1== ... + ... + ... * ..., ... + ... == ... + ..., ... == ...|...],
	T = cf_contractor([_T, _S, _R, _Q, _P, _O, _N, _M|...], [_U, _V, _W, _X, _Y, _Z, _A1, _B1|...]),
	_A:: -0.428302863587250...,
	_B:: -0.476596424356293...,
	_C:: -0.519652463646401...,
	_D:: -0.558099324856152...,
	_E:: -0.592506155965083...,
	_F:: -0.624503707410516...,
	_G:: -0.623238669132451...,
	_H:: -0.62141967671364...,
	_I:: -0.61961584283347...,
	_J:: -0.618226017919857...,
	_K:: -0.61751802484149...,
	_L:: -0.61773183031864...,
	_M:: -0.617900316253351...,
	_N:: -0.618007798540868...,
	_O:: -0.61805706175504...,
	_P:: -0.618062699716298...,
	_Q:: -0.61804719935080...,
	_R:: -0.61801119573861...,
	_S:: -0.61887207949504...,
	_T:: -0.58627694540011...,
	_N1::real(-1.0Inf, 1.0Inf),
	_M1::real(-1.0Inf, 1.0Inf),
	_L1::real(-1.0Inf, 1.0Inf),
	_K1::real(-1.0Inf, 1.0Inf),
	_J1::real(-1.0Inf, 1.0Inf),
	_I1::real(-1.0Inf, 1.0Inf),
	_H1::real(-1.0Inf, 1.0Inf),
	_G1::real(-1.0Inf, 1.0Inf),
	_F1::real(-1.0Inf, 1.0Inf),
	_E1::real(-1.0Inf, 1.0Inf),
	_D1::real(-1.0Inf, 1.0Inf),
	_C1::real(-1.0Inf, 1.0Inf),
	_B1::real(-1.0Inf, 1.0Inf),
	_A1::real(-1.0Inf, 1.0Inf),
	_Z::real(-1.0Inf, 1.0Inf),
	_Y::real(-1.0Inf, 1.0Inf),
	_X::real(-1.0Inf, 1.0Inf),
	_W::real(-1.0Inf, 1.0Inf),
	_V::real(-1.0Inf, 1.0Inf),
	_U::real(-1.0Inf, 1.0Inf) .

##### Ebers and Moll Transistor Model

One of the more challenging examples in the literature is the Ebers-Moll transistor model consisting of 9 non-linear equations in 9 variables. From [Progress in the solving of a circuit design problem]:
>	"*Ebers and Moll’s circuit design problem [6] is considered as a challenging benchmark for local and global methods. Recently, two interval-based techniques were successfully applied: Ratschek and Rokne’ algorithm [17] has derived the solution with a precision of four significant digits in about fourteen months using a network of thirty Sun Sparc 1 workstations; Puget and Van Hentenryck’ method [16] has solved the problem with a precision of eight significant digits in about forty minutes using a Sun Sparc UltraII workstation (the improvement is great though different machines were used).*"
The quoted paper reports further algorithmic improvements resulting in 12 digit accuracy in less than 10 minutes. While `clpBNR`, being a wholly Prolog implementation, is not at all competitive on performance, this a good example of what issues can arise given such a "challenging" problem.

The Prolog definition of the Ebers and Moll transistor example:
.pl
	ebers_moll(Vs,Es) :-
		Vs=[X1,X2,X3,X4,X5,X6,X7,X8,X9],
		G1s=g1(0.485,0.752,0.869,0.982),
		G2s=g2(0.369,1.254,0.703,1.455),
		G3s=g3(5.2095,10.0677,22.9274,20.2153),
		G4s=g4(23.3037,101.779,111.461,191.267),
		G5s=g5(28.5132,111.8468,134.3844,211.4823),
		eq1s(Vs,G1s,G2s,G3s,G4s,G5s,Eq1s),
		eq2s(Vs,G1s,G2s,G3s,G4s,G5s,Eq2s),
		flatten([Eq1s,Eq2s,X1*X3-X2*X4==0],Es).
		 
	eq1s(Xs,G1s,G2s,G3s,G4s,G5s,Eqs) :- eq1s(4,Xs,G1s,G2s,G3s,G4s,G5s,Eqs).
	eq1s(0,Xs,G1s,G2s,G3s,G4s,G5s,[]) :-!.
	eq1s(K,Xs,G1s,G2s,G3s,G4s,G5s,[EqK|Eqs]) :-
		K1 is K-1, eq1s(K1,Xs,G1s,G2s,G3s,G4s,G5s,Eqs),
		eq1(K,Xs,G1s,G2s,G3s,G4s,G5s,EqK).
	
	eq2s(Xs,G1s,G2s,G3s,G4s,G5s,Eqs) :- eq2s(4,Xs,G1s,G2s,G3s,G4s,G5s,Eqs).
	eq2s(0,Xs,G1s,G2s,G3s,G4s,G5s,[]) :-!.
	eq2s(K,Xs,G1s,G2s,G3s,G4s,G5s,[EqK|Eqs]) :-
		K1 is K-1, eq2s(K1,Xs,G1s,G2s,G3s,G4s,G5s,Eqs),
		eq2(K,Xs,G1s,G2s,G3s,G4s,G5s,EqK).
		
	eq1(K,[X1,X2,X3,X4,X5,X6,X7,X8,X9|Ys],G1s,G2s,G3s,G4s,G5s,
		(1-X1*X2)*X3*(exp(X5*(G1K-G3K*X7*1e-3-G5K*X8*1e-3))-1)-G5K+G4K*X2 == 0
		) :-
		arg(K,G1s,G1K), arg(K,G3s,G3K), arg(K,G4s,G4K), arg(K,G5s,G5K).
	
	eq2(K,[X1,X2,X3,X4,X5,X6,X7,X8,X9|Ys],G1s,G2s,G3s,G4s,G5s,
		(1-X1*X2)*X4*(exp(X6*(G1K-G2K-G3K*X7*1e-3+G4K*X9*1e-3))-1)-G5K*X1+G4K == 0
		) :-
		arg(K,G1s,G1K), arg(K,G2s,G2K), arg(K,G3s,G3K), arg(K,G4s,G4K), arg(K,G5s,G5K).
Due to slow convergence, just applying the contraints and using `solve` is fairly ineffective; the builtin throttling mechanism, even with a fairly high `clpBNR_iteration_limit`, prematurely terminates many of the sub-branches without failing so pruning is minimal. Using the Taylor contractor is a significant improvement but can still take many hours before producing a moderately acceptable result (~4 digits of precision in agreement with the published answer):
eg
	?- Vs=[X1,X2,X3,X4,X5,X6,X7,X8,X9],ebers_moll(Vs,Es),Vs::real(0,10),taylor_merged_contractor({Es},T),cf_solve(T). 
	Vs = [X1, X2, X3, X4, X5, X6, X7, X8, X9],
	Es = [(1-X1*X2)*X3*(exp(X5*(... - ... - ... * ...))-1)-211.4823+191.267*X2==0, (1-X1*X2)*X3*(exp(X5*(... - ...))-1)-134.3844+111.461*X2==0, (1- ... * ...)*X3*(exp(... * ...)-1)-111.8468+101.779*X2==0, (... - ...)*X3*(exp(...)-1)-28.5132+23.3037*X2==0, ... * ... * (... - ...)-211.4823*X1+191.267==0, ... * ... - ... * ... + 111.461==0, ... - ... + 101.779==0, ... + ... == 0, ... == ...],
	T = cf_contractor([X9, X6, X4, X8, X7, X5, X3, X2|...], [_A, _B, _C, _D, _E, _F, _G, _H|...]),
	X1:: 0.8999987...,
	X2:: 0.45005...,
	X3:: 1.00024...,
	X4:: 2.00024...,
	X5:: 7.99948...,
	X6:: 8.00056...,
	X7:: 5.00078...,
	X8:: 0.99986...,
	X9:: 1.99954...,
	_I::real(-1.0Inf, 1.0Inf),
	_H::real(-1.0Inf, 1.0Inf),
	_G::real(-1.0Inf, 1.0Inf),
	_F::real(-1.0Inf, 1.0Inf),
	_E::real(-1.0Inf, 1.0Inf),
	_D::real(-1.0Inf, 1.0Inf),
	_C::real(-1.0Inf, 1.0Inf),
	_B::real(-1.0Inf, 1.0Inf),
	_A::real(-1.0Inf, 1.0Inf) .
This is just the first solution returned. Again, throttling prevents running fixed point iteration long enough to find failures that would prune the search tree caused by splitting. The complete answer would be the union of all such solutions. But the computation costs of either disabling throttling or collecting all solutions is probably prohibitive for this example, demonstrating the limitations of this implementation.

##### Summary

CISC based interval constraint systems overcame deficiencies in RISC, such as slow convergence, by building sophisticated narrowing algorithms into the constraint engine. But metalevel contractors can overcome some of these deficiencies without complicating the underlying engine design. Advances in hardware and software (Prolog) results in comparable performance to earlier CISC implementations, although the comparison is a bit unfair and CISC engine implemented in C will always be faster than this implementation of CLP(BNR) on equivalent hardware. The other advantage of this metalevel design is that it facilitates experimentation with new contractors without understanding (or compromising) the details of the underlying constraint system. This facilitates the addition of "specialized" contractors that may be more effective for particular problem domains.

<#TableOfContents>

&
	[Solving Polynomial Equations in one Variable] <- link #toc4Solving_Polynomial_Equations_in_one_Variable
	[Progress in the solving of a circuit design problem] <- link https://www.researchgate.net/publication/2322545_Progress_in_the_Solving_of_a_Circuit_Design_Problem
	[Algorithmic Power from Declarative Use of Redundant Constraints] <- link https://maarten.vanemden.com/Publications/redund.pdf
	[Appendix 1] <- link #toc4Appendix_1_-__clpBNRmeta_contractor.pl__Source