###  Development Tools for CLP(BNR)

The version of CLP(BNR) as a SWI-Prolog package is entirely implemented in Prolog, so all the standard Prolog development tools (debugger, profiler, etc.) can be used with CLP(BNR) applications. However, the details of the execution of interval narrowing can be overwhelming - many millions of narrowing operations may be required in what may seem to be simple programs. To help with this problem `clpBNR` has been added as a [`debug` topic]. Enabling this topic will generate a trace of constraint additions and narrowing operation failures on the console:
eg
	?- debug(clpBNR).
	true.

	﻿?- X::real(0,10),{X=<5},{X>19}.
	﻿% Add {_9178{real(0,10)}=<5}
	% Add {_9178{real(0,5)}>19}
	% ** fail ** 19<_9178{real(0,5)}.
	false.
If this is insufficient, tracing of individual narrowing operations can be done using [**trace_clpBNR/1**]. However it's easy to become overwhelmed by the sheer volume of the trace information, so it's best to limit usage to smaller problems. An example:
	﻿?- trace_clpBNR(true).
	true.

	[debug]  ?- [M,N]::integer(0,8), {M==3*N, M>3}.
	% _304974{integer(0,8)}==3*_305052{integer(0,8r3)}.
	% 3<_304974{integer(3.0000000000000004,8)}.
	% integral(_305052{integer(0,2)}).
	% integral(_304974{integer(4,8)}).
	% _304974{integer(4,6)}==3*_305052{integer(4r3,2)}.
	% 3<_304974{integer(4,6)}.
	% integral(2).
	% 6==3*2.
	M = 6,
	N = 2.
For some problems, it's sufficient to just monitor the value of a interval (or a few intervals). When this is true, the sheer volume of tracing can be reduced using the [**watch/2**] predicate:
eg
	?- debug(clpBNR).
	true.
	
	﻿?- [M,N]::integer(0,8), watch([M,N],log), {M==3*N, M>3}.
	% Add {_57378{integer(0,8)}==3*_57456{integer(0,8)}}
	% Unify _58316{real(-1.0Inf,1.0Inf)} with _57378{integer(0,8)}
	% Add {_57378{integer(0,8)}>3}
	% Set value of _57456{integer(0,8)} to (0,8r3)
	% Set value of _57378{integer(0,8)} to (3.0000000000000004,8)
	% Set value of _57456{integer(0,8r3)} to (0,2)
	% Set value of _57378{integer(3.0000000000000004,8)} to (4,8)
	% Set value of _57378{integer(4,8)} to (4,6)
	% Set value of _57456{integer(0,2)} to (4r3,2)
	% Set value of _57456{integer(4r3,2)} to (2,2)
	% Unify _?{integer(4r3,2)} with 2
	% Set value of _57378{integer(4,6)} to (6,6)
	% Unify _?{integer(4,6)} with 6
	M = 6,
	N = 2.

Setting the CLP(BNR) output mode to "verbose" (prolog environment flag `clpBNR_verbose = true`) can also be helpful in some situations when just the residual constraints on intervals provide useful information.

Finally, use [**clpStatistics**] to get a general idea of performance and narrowing operation counts.

<#TableOfContents>

&
	[`debug` topic] <- link https://www.swi-prolog.org/pldoc/man?section=debug
	[**watch/2**] <- link #toc4**watch**(*+Intervals,_++Atom*)
	[**trace_clpBNR/1**] <- link #toc4**trace_clpBNR**(*?Boolean*)
	[**clpStatistics**] <- link #toc4**clpStatistic**(*+Statistic*),_**clpStatistics**,_**clpStatistics**(*--Statistics*)